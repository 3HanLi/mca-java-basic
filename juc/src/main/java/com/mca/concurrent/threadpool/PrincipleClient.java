package com.mca.concurrent.threadpool;

/**
 * 线程池实现原理
 * 
 * 1 Java中的线程池是运用场景最多的并发框架，主要有三大好处
 * 	 1.1 降低资源消耗：通过重复利用已经创建的线程降低创建和销毁线程的消耗 
 *   1.2 提高响应速度：当任务来临时，不需要创建线程，直接从线程池获取线程执行任务
 *   1.3 提高线程的可管理性：程是一种稀缺资源，若不加以限制，不仅会占用大量资源，而且会影响系统的稳定性
 *   
 * 2 线程池理论：提交任务到线程池，线程池的处理流程：
 * 	 2.1 判断核心线程池是否都启用，如果还未全部启动，创建线程执行任务
 *   2.2 如果核心线程全部启动，则将任务加入阻塞队列
 *   2.3 如果阻塞队列已满，则启用新的线程执行任务
 *   2.4 如果线程数量超过线程池允许的最大数量，则将任务交给饱和策略处理
 *   
 * 3 线程池实现：线程池实现类ThreadPoolExecutor执行execute方法的流程如下：
 *   3.1 当前启动的线程小于corePoolSize，启动新线程执行任务【执行该步骤需要获取全局锁】
 *   3.2 运行的线程大于corePoolSize，则将任务加入BlockingQueue
 *   3.3 如果BlockingQueue已满，创建新的线程执行任务【执行该步骤需要获取全局锁】
 *   3.4 当前线程数量大于maximumPoolSize，任务被拒绝，调用RejectedExecutionHandler.rejectedExecution执行拒绝策略
 *   
 *   说明：线程池中的某个线程在执行完一个任务后，会循环获取工作队列中的任务来执行
 * 
 * @author wangyong
 * @date 2019年2月21日 下午3:37:46
 */
public class PrincipleClient {

}
